{"version":3,"sources":["components/Cell.js","components/Board.js","components/Game.js","game-config.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","value","onClick","style","className","Board","cells","map","cell","i","Game","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsnext","setXisNext","champion","squares","lines","length","a","b","c","findTheLines","xO","championStyle","historyPoint","slice","current","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAYeA,EAVF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACbC,EAAQF,EAAK,gBAAYA,GAAZ,QAEnB,OACI,wBAAQG,UAAWD,EAAOD,QAASA,EAAnC,SACKD,KCIEI,EARD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOJ,EAAV,EAAUA,QAAV,OACV,qBAAKE,UAAU,QAAf,SACKE,EAAMC,KAAI,SAACC,EAAMC,GAAP,OACX,cAAC,EAAD,CAAcR,MAAOO,EAAMN,QAAS,kBAAMA,EAAQO,KAAvCA,SCFnB,IAsCeC,EAtCF,WACT,MAA8BC,mBAAS,CAACC,MAAM,GAAGC,KAAK,QAAtD,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACMC,ECRH,SAAsBC,GAWzB,IAVA,IAAMC,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFb,EAAI,EAAGA,EAAIa,EAAMC,OAAQd,IAAK,CACnC,kBAAkBa,EAAMb,GAAxB,GAAOe,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAIL,EAAQG,IAAMH,EAAQG,KAAOH,EAAQI,IAAMJ,EAAQG,KAAOH,EAAQK,GAClE,OAAOL,EAAQG,GAGvB,OAAO,KDTUG,CAAab,EAAQE,IAChCY,EAAKV,EAAU,IAAM,IACrBW,EAAgBT,EAAQ,8BAoB9B,OACI,qCACI,4CACA,sBAAKhB,UAAU,YAAf,UACI,cAAC,EAAD,CAAOE,MAAOQ,EAAQE,GAAad,QAtB3B,SAACO,GACjB,IAAMqB,EAAehB,EAAQiB,MAAM,EAAGf,EAAa,GAC7CgB,EAAUF,EAAad,GACvBV,EAAK,YAAO0B,GAGdZ,GAAYd,EAAMG,KAEtBH,EAAMG,GAAKmB,EACXb,EAAW,GAAD,mBAAKe,GAAL,CAAmBxB,KAC7BW,EAAca,EAAaP,QAC3BJ,GAAYD,OAYJ,wBAAQhB,QATN,SAACO,GACXQ,EAAc,IAQN,yBACA,oBAAIb,UAAWyB,EAAf,SAA+BT,EAAW,YAAcA,EAAW,YEvBpEa,MAVf,WACE,OACE,qBAAK7B,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACI,cAAC,EAAD,SCKK8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.af70d23a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Cell = ({ value, onClick }) => {\r\n    const style = value ? `cells ${value}` : `cells`;\r\n\r\n    return (\r\n        <button className={style} onClick={onClick}>\r\n            {value}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Cell;\r\n\r\n","import React from \"react\";\r\nimport Cell from \"./Cell\";\r\n\r\nconst Board = ({ cells, onClick }) => (\r\n    <div className=\"board\">\r\n        {cells.map((cell, i) => (\r\n        <Cell key={i} value={cell} onClick={() => onClick(i)} />\r\n        ))}\r\n    </div>\r\n);\r\n\r\nexport default Board;","import React, {useState} from \"react\";\r\nimport Board from \"./Board\";\r\nimport {findTheLines} from \"../game-config\";\r\n\r\nconst Game = () => {\r\n    const [history, setHistory] = useState([Array(9).fill(null)]);\r\n    const [stepNumber, setStepNumber] = useState(0);\r\n    const [xIsnext, setXisNext] = useState(true);\r\n    const champion = findTheLines(history[stepNumber]);\r\n    const xO = xIsnext ? \"X\" : \"O\";\r\n    const championStyle = champion ? `champion-visible` : `champion`;\r\n\r\n    const handleClick = (i) => {\r\n        const historyPoint = history.slice(0, stepNumber + 1);\r\n        const current = historyPoint[stepNumber];\r\n        const cells = [...current];\r\n\r\n        // return if winner\r\n        if (champion || cells[i]) return;\r\n        // select the cell\r\n        cells[i] = xO;\r\n        setHistory([...historyPoint, cells]);\r\n        setStepNumber(historyPoint.length);\r\n        setXisNext(!xIsnext);\r\n    };\r\n\r\n    const reset = (i) => {\r\n        setStepNumber(0);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h1>Tic-tac Yo</h1>\r\n            <div className=\"container\">\r\n                <Board cells={history[stepNumber]} onClick={handleClick}/>\r\n                <button onClick={reset}>Start Fresh</button>\r\n                <h3 className={championStyle}>{champion ? \"Champion \" + champion : \"\"}</h3>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Game;","export function findTheLines(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}","import './App.css';\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <Game />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}